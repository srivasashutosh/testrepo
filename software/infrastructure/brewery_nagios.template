{
  "AWSTemplateFormatVersion" : "2010-09-09",
  
  "Description" : "CloudFormation Template to provision Manatee Nagios instance",
  
  "Parameters" : {
      
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "String",
      "Default" : "manatee_dev",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    },

    "InstanceType" : {
      "Description" : "Nagios EC2 instance type",
      "Type" : "String",
      "Default" : "t1.micro",
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    
    "LinuxHostToMonitor" : {
      "Description" : "Nagios will be setup with this host definition",
      "Type" : "String",
      "Default" : "manatee.sarvatix.com",
      "ConstraintDescription" : "must be a valid EC2 instance type."
    }
  
  },
  
  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "32" },
      "m1.small"    : { "Arch" : "32" },
      "m1.large"    : { "Arch" : "64" },
      "m1.xlarge"   : { "Arch" : "64" },
      "m2.xlarge"   : { "Arch" : "64" },
      "m2.2xlarge"  : { "Arch" : "64" },
      "m2.4xlarge"  : { "Arch" : "64" },
      "c1.medium"   : { "Arch" : "32" },
      "c1.xlarge"   : { "Arch" : "64" },
      "cc1.4xlarge" : { "Arch" : "64" }
    },
    "AWSRegionArch2AMI" : {
      "us-east-1"      : { "32" : "ami-7f418316", "64" : "ami-7341831a" },
      "us-west-1"      : { "32" : "ami-951945d0", "64" : "ami-971945d2" },
      "us-west-2"      : { "32" : "ami-16fd7026", "64" : "ami-10fd7020" },
      "eu-west-1"      : { "32" : "ami-24506250", "64" : "ami-20506254" },
      "ap-southeast-1" : { "32" : "ami-74dda626", "64" : "ami-7edda62c" },
      "ap-northeast-1" : { "32" : "ami-dcfa4edd", "64" : "ami-e8fa4ee9" }
    }
  },
    
  "Resources" : {     
      
    "CfnUser" : {
      "Type" : "AWS::IAM::User",
      "Properties" : {
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": { "Statement":[{
            "Effect":"Allow",
            "Action":"*",
            "Resource":"*"
          }
        ]}
       }]
      }
    },

    "HostKeys" : {
      "Type" : "AWS::IAM::AccessKey",
      "Properties" : {
        "UserName" : {"Ref": "CfnUser"}
      }
    },

    "WebServer": {  
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "nagios-plugins-all"    : [],
                "subversion"            : [],
				"nagios"				: [],
				"php"					: [],
				"rubygems"				: [],
				"ruby-devel"			: [],
				"gcc"					: [],
				"libxslt-devel"			: [],
				"gcc-c++"				: []	
              },
			  "rubygems" : {
			    "cucumber-nagios"       : []
			  }
            },

            "files" : {
               "/etc/nagios/objects/services.cfg" : {
                "content" : { "Fn::Join" : ["", [
                  "define service {\n",
                  "use generic-service\n",
                  "host_name ", { "Ref" : "LinuxHostToMonitor" }, "\n",
                  "service_description cucumber-nagios service\n",
                  "check_command cucumber-nagios!/var/tmp/manatee\n",
                  "}"
                  ]]},
                "mode"   : "000644",
                "owner"  : "root",
                "group"  : "root"
              },  
              
               "/etc/nagios/commands.cfg" : {
                "content" : { "Fn::Join" : ["", [
                  "define command {\n",
                  "command_name    cucumber-nagios\n",
                  "command_line    /usr/bin/cucumber-nagios $ARG1$\n",
                  "}"
                  ]]},
                "mode"   : "000644",
                "owner"  : "root",
                "group"  : "root"
              },                  

              "/etc/nagios/objects/hosts.cfg" : {
                "content" : { "Fn::Join" : ["", [
                  "define host {\n",
                  "use linux-server\n",  
                  "host_name ", { "Ref" : "LinuxHostToMonitor" }, "\n",
                  "check_command check-host-alive\n",
                  "}"
                  ]]},
                "mode"   : "000644",
                "owner"  : "root",
                "group"  : "root"
              },
        
            "/root/.bash_profile" : {
                "content" : { "Fn::Join" : ["", [
                  "# .bash_profile\n",
                
                  "# Get the aliases and functions\n",
                  "if [ -f ~/.bashrc ]; then\n",
                    ". ~/.bashrc\n",
                  "fi\n",

                  "# User specific environment and startup programs\n",
                  "export GROOVY_HOME=/usr/bin/groovy-1.8.2\n",
                  "export GRAILS_HOME=/usr/bin/grails-1.3.7\n",
                  "export JENKINS_HOME=/usr/share/tomcat6/.jenkins\n",
                  "export AWS_CLOUDFORMATION_HOME=/opt/aws/apitools/cfn\n",
                  "PATH=$PATH:$JAVA_HOME/bin:$GROOVY_HOME/bin:$GRAILS_HOME/bin:$HOME/bin:$AWS_CLOUDFORMATION_HOME/bin\n",
                  "export PATH"
                  ]]},
                "mode"   : "000744",
                "owner"  : "root",
                "group"  : "root"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ {"Ref" : "FrontendGroup"} ],
        "KeyName"        : { "Ref" : "KeyName" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "yum -y install java-1.6.0-openjdk*\n",
          "yum update -y aws-cfn-bootstrap\n",

          "# Install packages\n",
          "/opt/aws/bin/cfn-init -s ", { "Ref" : "AWS::StackName" }, " -r WebServer ",
          "    --access-key ",  { "Ref" : "HostKeys" },
          "    --secret-key ", {"Fn::GetAtt": ["HostKeys", "SecretAccessKey"]},
          "    --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",
          
          "cd /home/ec2-user/\n",

          "chkconfig --level 3 nagios on\n",
          
          "echo -e 'cfg_file=/etc/nagios/objects/hosts.cfg\n' >> /etc/nagios/nagios.cfg\n",
          "echo -e 'cfg_file=/etc/nagios/objects/services.cfg\n' >> /etc/nagios/nagios.cfg\n",
          "cat /etc/nagios/commands.cfg >> /etc/nagios/objects/commands.cfg\n",
          "cd /var/tmp\n",


          "cucumber-nagios-gen project manatee\n",
          "service nagios restart\n",
          "service httpd restart\n", 
          
          "/opt/aws/bin/cfn-signal", " -e 0", " '", {"Ref" : "WaitHandle"}, "'"
        ]]}}
      }
    },

    "IPAddress" : {
      "Type" : "AWS::EC2::EIP"
    },
    
    "IPAssoc" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "InstanceId" : { "Ref" : "WebServer" },
        "EIP" : { "Ref" : "IPAddress" }
       }
    },
    
    "FrontendGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH and access to Apache and Tomcat",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "8080", "ToPort" : "8080", "CidrIp" : "0.0.0.0/0"}
        ]
      }      
    },
    
    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "WebServer",
      "Properties" : {
        "Handle" : { "Ref" : "WaitHandle" },
        "Timeout" : "1800"
      }
    }          
  },
  
  "Outputs" : {
    "ApacheSite" : {
      "Value" : { "Fn::Join" : ["", ["http://", { "Ref" : "IPAddress" }]] },
      "Description" : "URL for newly created Apache Test website"
    },
    "JenkinsURL" : {
      "Value" : { "Fn::Join" : ["", ["http://", { "Ref" : "IPAddress" }, ":8080/jenkins"]] },
      "Description" : "URL for newly created Jenkins app"
    },
    "NexusURL" : {
      "Value" : { "Fn::Join" : ["", ["http://", { "Ref" : "IPAddress" }, ":8080/nexus"]] },
      "Description" : "URL for newly created Nexus repository"
    },
    "InstanceIPAddress" : {
      "Value" : { "Ref" : "IPAddress" }
    }
  }
}